@page "/admin/menu-items/{MenuId:int}"
@using Microsoft.AspNetCore.Authorization
@using RestaurantOrdering.Models
@using RestaurantOrdering.Repositories
@using MenuModel = RestaurantOrdering.Models.Menu
@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@inject IMenuRepository MenuRepository
@inject IMenuItemRepository MenuItemRepository
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>@(menu?.Name ?? "Men√º") √ñƒüeleri - Admin</PageTitle>

<div class="container mx-auto px-4 py-8">
    <!-- Header Section -->
    <div class="flex justify-between items-center mb-8">
        <div>
            <h1 class="text-3xl font-bold text-gray-800 mb-2">
                @if (menu != null)
                {
                    <span>@menu.Name</span>
                }
                <span class="text-gray-600"> - Men√º √ñƒüeleri</span>
            </h1>
            <p class="text-gray-600">Men√º √∂ƒüelerini g√∂r√ºnt√ºleyin ve y√∂netin</p>
        </div>
        <div class="flex gap-3">
            <button @onclick="ShowAddModal" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded">
                + Yeni √ñƒüe Ekle
            </button>
            <button @onclick="GoBack" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">
                ‚Üê Men√º Y√∂netimi
            </button>
        </div>
    </div>

    <!-- Success/Error Messages -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            @errorMessage
        </div>
    }

    @if (menuItems == null)
    {
        <div class="text-center">
            <div class="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500 mx-auto"></div>
            <p class="mt-4 text-gray-600">Men√º √∂ƒüeleri y√ºkleniyor...</p>
        </div>
    }
    else if (!menuItems.Any())
    {
        <div class="text-center py-12">
            <div class="text-gray-400 text-6xl mb-4">üçΩÔ∏è</div>
            <h3 class="text-xl font-semibold text-gray-700 mb-2">Hen√ºz men√º √∂ƒüesi yok</h3>
            <p class="text-gray-500 mb-6">Bu kategoriye ilk men√º √∂ƒüenizi ekleyin</p>
            <button @onclick="ShowAddModal" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded">
                ƒ∞lk √ñƒüeyi Ekle
            </button>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-6">
            @foreach (var item in menuItems)
            {
                <div class="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow">
                    <!-- Image Section -->
                    <div class="relative">
                        @if (!string.IsNullOrEmpty(item.ImageData))
                        {
                            <img src="@item.ImageData" alt="@item.Name" class="w-full h-48 object-cover rounded-t-lg">
                        }
                        else if (!string.IsNullOrEmpty(item.ImageUrl))
                        {
                            <img src="@item.ImageUrl" alt="@item.Name" class="w-full h-48 object-cover rounded-t-lg">
                        }
                        else
                        {
                            <div class="w-full h-48 bg-gray-200 rounded-t-lg flex items-center justify-center">
                                <svg class="w-16 h-16 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                                    <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                                </svg>
                            </div>
                        }
                        
                        <span class="absolute top-2 right-2 px-2 py-1 text-xs rounded-full @(item.IsAvailable ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                            @(item.IsAvailable ? "Mevcut" : "T√ºkendi")
                        </span>
                    </div>
                    
                    <!-- Content Section -->
                    <div class="p-4">
                        <h3 class="text-lg font-semibold text-gray-900 mb-2 line-clamp-2">@item.Name</h3>
                        
                        @if (!string.IsNullOrEmpty(item.Description))
                        {
                            <p class="text-gray-600 text-sm mb-3 line-clamp-2">@item.Description</p>
                        }
                        
                        <div class="flex items-center justify-between mb-3">
                            <span class="text-xl font-bold text-green-600">@item.Price.ToString("C2")</span>
                            <span class="text-sm text-gray-500">@item.CreatedAt.ToString("dd.MM.yyyy")</span>
                        </div>
                        
                        <!-- Action Buttons -->
                        <div class="grid grid-cols-2 gap-2">
                            <button @onclick="() => ShowEditModal(item)" class="bg-blue-500 hover:bg-blue-600 text-white text-sm font-medium py-2 px-3 rounded transition-colors">
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                </svg>
                                D√ºzenle
                            </button>
                            <button @onclick="() => ToggleAvailability(item)" class="@(item.IsAvailable ? "bg-yellow-500 hover:bg-yellow-600" : "bg-green-500 hover:bg-green-600") text-white text-sm font-medium py-2 px-3 rounded transition-colors">
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="@(item.IsAvailable ? "M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L5.636 5.636" : "M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z")"></path>
                                </svg>
                                @(item.IsAvailable ? "T√ºket" : "Aktif")
                            </button>
                            <button @onclick="() => ShowDeleteModal(item)" class="bg-red-500 hover:bg-red-600 text-white text-sm font-medium py-2 px-3 rounded transition-colors col-span-2">
                                <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                </svg>
                                Sil
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Add/Edit Modal -->
    @if (showModal)
    {
        <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div class="relative top-20 mx-auto p-5 border w-full max-w-2xl shadow-lg rounded-md bg-white">
                <div class="mt-3">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">
                        @(editingItem?.Id == 0 ? "Yeni Men√º √ñƒüesi Ekle" : "Men√º √ñƒüesi D√ºzenle")
                    </h3>
                    
                    <EditForm Model="editingItem" OnValidSubmit="SaveItem">
                        <DataAnnotationsValidator />
                        
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <!-- Left Column -->
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">√ñƒüe Adƒ±</label>
                                    <InputText @bind-Value="editingItem!.Name" 
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                               placeholder="Men√º √∂ƒüesi adƒ±" />
                                    <ValidationMessage For="@(() => editingItem!.Name)" class="text-red-500 text-sm mt-1" />
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Fiyat (‚Ç∫)</label>
                                    <InputNumber @bind-Value="editingItem!.Price" 
                                                 class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                                 placeholder="0.00" step="0.01" />
                                    <ValidationMessage For="@(() => editingItem!.Price)" class="text-red-500 text-sm mt-1" />
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Resim Y√ºkle</label>
                                    <InputFile OnChange="OnFileSelected" accept="image/*" 
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                                    <p class="text-xs text-gray-500 mt-1">JPG, PNG, GIF formatlarƒ± desteklenir (Max: 5MB)</p>
                                    
                                    @if (!string.IsNullOrEmpty(editingItem?.ImageData))
                                    {
                                        <div class="mt-2">
                                            <p class="text-sm text-green-600 mb-2">‚úÖ Resim y√ºklendi</p>
                                            <img src="@editingItem.ImageData" alt="√ñnizleme" class="w-32 h-32 object-cover rounded-lg border" />
                                            <button type="button" @onclick="RemoveImage" 
                                                    class="mt-2 text-red-600 hover:text-red-800 text-sm">
                                                üóëÔ∏è Resmi Kaldƒ±r
                                            </button>
                                        </div>
                                    }
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Resim URL (Alternatif)</label>
                                    <InputText @bind-Value="editingItem!.ImageUrl" 
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                               placeholder="https://..." />
                                    <ValidationMessage For="@(() => editingItem!.ImageUrl)" class="text-red-500 text-sm mt-1" />
                                    <p class="text-xs text-gray-500 mt-1">Resim y√ºklemek yerine URL de kullanabilirsiniz</p>
                                </div>

                                <div>
                                    <label class="flex items-center">
                                        <InputCheckbox @bind-Value="editingItem!.IsAvailable" class="mr-2" />
                                        <span class="text-sm text-gray-700">Mevcut</span>
                                    </label>
                                </div>
                            </div>

                            <!-- Right Column -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">A√ßƒ±klama</label>
                                <InputTextArea @bind-Value="editingItem!.Description" 
                                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                               rows="8" 
                                               placeholder="Men√º √∂ƒüesi a√ßƒ±klamasƒ±..." />
                                <ValidationMessage For="@(() => editingItem!.Description)" class="text-red-500 text-sm mt-1" />
                            </div>
                        </div>

                        <div class="flex justify-end gap-3 mt-6">
                            <button type="button" @onclick="CloseModal" 
                                    class="px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white font-bold rounded">
                                ƒ∞ptal
                            </button>
                            <button type="submit" 
                                    class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white font-bold rounded">
                                @(editingItem?.Id == 0 ? "Ekle" : "G√ºncelle")
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }

    <!-- Delete Confirmation Modal -->
    @if (showDeleteModal)
    {
        <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3 text-center">
                    <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
                        <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                    </div>
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Men√º √ñƒüesi Sil</h3>
                    <p class="text-sm text-gray-500 mb-2">Bu men√º √∂ƒüesini silmek istediƒüinizden emin misiniz?</p>
                    <p class="text-sm font-medium text-red-600 mb-6">
                        <strong>"@itemToDelete?.Name"</strong> kalƒ±cƒ± olarak silinecektir.
                    </p>
                    
                    <div class="flex space-x-3">
                        <button @onclick="async () => await ConfirmDelete()" 
                                class="flex-1 bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded">
                            Evet, Sil
                        </button>
                        <button @onclick="CloseDeleteModal" 
                                class="flex-1 bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">
                            ƒ∞ptal
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int MenuId { get; set; }
    
    private MenuModel? menu;
    private List<MenuItem> menuItems = new();
    private MenuItem? editingItem;
    private MenuItem? itemToDelete;
    
    private bool showModal = false;
    private bool showDeleteModal = false;
    
    private string successMessage = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMenu();
        await LoadMenuItems();
    }

    private async Task LoadMenu()
    {
        try
        {
            menu = await MenuRepository.GetByIdAsync(MenuId);
        }
        catch (Exception ex)
        {
            errorMessage = "Men√º bilgileri y√ºklenirken hata olu≈ütu: " + ex.Message;
        }
    }

    private async Task LoadMenuItems()
    {
        try
        {
            var allItems = await MenuItemRepository.GetByMenuIdAsync(MenuId);
            menuItems = allItems.ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "Men√º √∂ƒüeleri y√ºklenirken hata olu≈ütu: " + ex.Message;
        }
    }

    private void ShowAddModal()
    {
        editingItem = new MenuItem
        {
            Id = 0,
            MenuId = MenuId,
            IsAvailable = true,
            CreatedAt = DateTime.Now,
            Price = 0
        };
        showModal = true;
        ClearMessages();
    }

    private void ShowEditModal(MenuItem item)
    {
        editingItem = new MenuItem
        {
            Id = item.Id,
            Name = item.Name,
            Description = item.Description,
            Price = item.Price,
            ImageUrl = item.ImageUrl,
            ImageData = item.ImageData,
            IsAvailable = item.IsAvailable,
            MenuId = item.MenuId,
            CreatedAt = item.CreatedAt
        };
        showModal = true;
        ClearMessages();
    }

    private void ShowDeleteModal(MenuItem item)
    {
        itemToDelete = item;
        showDeleteModal = true;
        ClearMessages();
    }

    private void CloseModal()
    {
        showModal = false;
        editingItem = null;
        ClearMessages();
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        itemToDelete = null;
        ClearMessages();
    }

    private async Task SaveItem()
    {
        try
        {
            if (editingItem == null) 
            {
                errorMessage = "D√ºzenlenecek √∂ƒüe bulunamadƒ±.";
                return;
            }

            if (string.IsNullOrWhiteSpace(editingItem.Name))
            {
                errorMessage = "√ñƒüe adƒ± bo≈ü olamaz.";
                return;
            }

            if (editingItem.Price <= 0)
            {
                errorMessage = "Fiyat 0'dan b√ºy√ºk olmalƒ±dƒ±r.";
                return;
            }

            // Debugging: Log the operation
            Console.WriteLine($"üíæ Saving MenuItem: ID={editingItem.Id}, Name='{editingItem.Name}', MenuId={editingItem.MenuId}");
            Console.WriteLine($"üíæ ImageData exists: {!string.IsNullOrEmpty(editingItem.ImageData)}");

            if (editingItem.Id == 0)
            {
                // Yeni √∂ƒüe ekleme
                Console.WriteLine("‚ûï Creating new menu item...");
                var result = await MenuItemRepository.CreateAsync(editingItem);
                Console.WriteLine($"‚úÖ Created with ID: {result.Id}");
                successMessage = "Men√º √∂ƒüesi ba≈üarƒ±yla eklendi!";
            }
            else
            {
                // Mevcut √∂ƒüeyi g√ºncelleme
                Console.WriteLine($"‚úèÔ∏è Updating menu item with ID: {editingItem.Id}");
                await MenuItemRepository.UpdateAsync(editingItem);
                Console.WriteLine("‚úÖ Updated successfully");
                successMessage = "Men√º √∂ƒüesi ba≈üarƒ±yla g√ºncellendi!";
            }

            // Men√º √∂ƒüelerini yeniden y√ºkle
            Console.WriteLine("üîÑ Reloading menu items...");
            await LoadMenuItems();
            CloseModal();
            
            // Success mesajƒ±nƒ± 3 saniye sonra temizle
            StateHasChanged();
            await Task.Delay(3000);
            successMessage = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error in SaveItem: {ex}");
            errorMessage = "ƒ∞≈ülem sƒ±rasƒ±nda hata olu≈ütu: " + ex.Message;
            StateHasChanged();
        }
    }

    private async Task ConfirmDelete()
    {
        try
        {
            if (itemToDelete == null) 
            {
                errorMessage = "Silinecek √∂ƒüe bulunamadƒ±.";
                return;
            }

            Console.WriteLine($"üóëÔ∏è Deleting MenuItem: ID={itemToDelete.Id}, Name='{itemToDelete.Name}'");
            
            await MenuItemRepository.DeleteAsync(itemToDelete.Id);
            Console.WriteLine("‚úÖ Delete successful");
            
            successMessage = $"'{itemToDelete.Name}' ba≈üarƒ±yla silindi!";
            
            Console.WriteLine("üîÑ Reloading menu items after delete...");
            await LoadMenuItems();
            CloseDeleteModal();
            
            // Success mesajƒ±nƒ± 3 saniye sonra temizle
            StateHasChanged();
            await Task.Delay(3000);
            successMessage = "";
            StateHasChanged();
        }
        catch (InvalidOperationException ex)
        {
            Console.WriteLine($"‚ùå Business rule violation in ConfirmDelete: {ex.Message}");
            errorMessage = ex.Message;
            CloseDeleteModal();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error in ConfirmDelete: {ex}");
            errorMessage = "√ñƒüe silinirken hata olu≈ütu: " + ex.Message;
            CloseDeleteModal();
            StateHasChanged();
        }
    }

    private async Task ToggleAvailability(MenuItem item)
    {
        try
        {
            item.IsAvailable = !item.IsAvailable;
            await MenuItemRepository.UpdateAsync(item);
            
            successMessage = $"'{item.Name}' durumu g√ºncellendi!";
            await LoadMenuItems();
            
            // Clear success message after 2 seconds
            await Task.Delay(2000);
            successMessage = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "Durum g√ºncellenirken hata olu≈ütu: " + ex.Message;
            // Revert the change
            item.IsAvailable = !item.IsAvailable;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/admin/menus");
    }

    private void ClearMessages()
    {
        successMessage = "";
        errorMessage = "";
        StateHasChanged();
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;
            
            if (file == null) return;
            
            // Dosya boyutu kontrol√º (5MB limit)
            if (file.Size > 5 * 1024 * 1024)
            {
                errorMessage = "Dosya boyutu 5MB'tan b√ºy√ºk olamaz.";
                return;
            }
            
            // Dosya t√ºr√º kontrol√º
            var allowedTypes = new[] { "image/jpeg", "image/jpg", "image/png", "image/gif" };
            if (!allowedTypes.Contains(file.ContentType))
            {
                errorMessage = "Sadece JPG, PNG ve GIF formatlarƒ± desteklenir.";
                return;
            }
            
            // Dosyayƒ± oku ve Base64'e √ßevir
            using var stream = file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            var dataUrl = $"data:{file.ContentType};base64,{base64}";
            
            if (editingItem != null)
            {
                editingItem.ImageData = dataUrl;
                editingItem.ImageUrl = ""; // URL'yi temizle
            }
            
            successMessage = "Resim ba≈üarƒ±yla y√ºklendi!";
            
            // Success mesajƒ±nƒ± 2 saniye sonra temizle
            await Task.Delay(2000);
            successMessage = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "Resim y√ºklenirken hata olu≈ütu: " + ex.Message;
        }
    }

    private void RemoveImage()
    {
        if (editingItem != null)
        {
            editingItem.ImageData = "";
            successMessage = "Resim kaldƒ±rƒ±ldƒ±.";
        }
        StateHasChanged();
    }
}