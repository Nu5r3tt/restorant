@page "/admin/menus"
@using Microsoft.AspNetCore.Authorization
@using RestaurantOrdering.Models
@using RestaurantOrdering.Repositories
@using MenuModel = RestaurantOrdering.Models.Menu
@using Microsoft.AspNetCore.Components.Forms
@inject IMenuRepository MenuRepository
@inject IMenuItemRepository MenuItemRepository
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Men√º Y√∂netimi - Admin</PageTitle>

<div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
        <div>
            <h1 class="text-3xl font-bold text-gray-800 mb-2">Men√º Y√∂netimi</h1>
            <p class="text-gray-600">Men√º kategorilerini ve √∂ƒüelerini y√∂netin</p>
        </div>
        <div class="flex gap-3">
            <button @onclick="ShowAddModal" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
                + Yeni Kategori Ekle
            </button>
            <button @onclick="GoBack" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">
                ‚Üê Admin Panel
            </button>
        </div>
    </div>

    <!-- Success/Error Messages -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            @errorMessage
        </div>
    }

    @if (menus == null)
    {
        <div class="text-center">
            <div class="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500 mx-auto"></div>
            <p class="mt-4 text-gray-600">Men√ºler y√ºkleniyor...</p>
        </div>
    }
    else if (!menus.Any())
    {
        <div class="text-center py-12">
            <div class="text-gray-400 text-6xl mb-4">üìã</div>
            <h3 class="text-xl font-semibold text-gray-700 mb-2">Hen√ºz kategori yok</h3>
            <p class="text-gray-500 mb-6">ƒ∞lk men√º kategorinizi ekleyerek ba≈ülayƒ±n</p>
            <button @onclick="ShowAddModal" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
                ƒ∞lk Kategoriyi Ekle
            </button>
        </div>
    }
    else
    {
        <div class="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            @foreach (var menu in menus)
            {
                <div class="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow p-6">
                    <div class="flex justify-between items-start mb-4">
                        <h3 class="text-xl font-semibold text-gray-800">@menu.Name</h3>
                        <span class="@(menu.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800") px-2 py-1 text-xs font-medium rounded-full">
                            @(menu.IsActive ? "Aktif" : "Pasif")
                        </span>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(menu.Description))
                    {
                        <p class="text-gray-600 text-sm mb-4 line-clamp-3">@menu.Description</p>
                    }

                    <div class="flex items-center justify-between text-sm text-gray-500 mb-4">
                        <span class="flex items-center">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                            </svg>
                            @menu.MenuItems.Count() √∂ƒüe
                        </span>
                        <span class="flex items-center">
                            <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            @menu.CreatedAt.ToString("dd.MM.yyyy")
                        </span>
                    </div>

                    <div class="grid grid-cols-2 gap-2">
                        <button @onclick="() => ViewMenuItems(menu.Id)" class="bg-green-500 hover:bg-green-600 text-white text-sm font-medium py-2 px-3 rounded transition-colors">
                            <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                            </svg>
                            G√∂r√ºnt√ºle
                        </button>
                        <button @onclick="() => ShowEditModal(menu)" class="bg-blue-500 hover:bg-blue-600 text-white text-sm font-medium py-2 px-3 rounded transition-colors">
                            <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                            D√ºzenle
                        </button>
                        <button @onclick="() => ShowDeleteModal(menu)" class="bg-red-500 hover:bg-red-600 text-white text-sm font-medium py-2 px-3 rounded transition-colors col-span-2">
                            <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                            Sil
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Add/Edit Modal -->
    @if (showModal)
    {
        <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3 text-center">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">
                        @(editingMenu?.Id == 0 ? "Yeni Kategori Ekle" : "Kategori D√ºzenle")
                    </h3>
                    
                    <EditForm Model="editingMenu" OnValidSubmit="SaveMenu">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-4 text-left">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Kategori Adƒ±</label>
                            <InputText @bind-Value="editingMenu!.Name" 
                                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                       placeholder="√ñrn: Ana Yemekler, ƒ∞√ßecekler..." />
                            <ValidationMessage For="@(() => editingMenu!.Name)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div class="mb-4 text-left">
                            <label class="block text-sm font-medium text-gray-700 mb-2">A√ßƒ±klama (ƒ∞steƒüe baƒülƒ±)</label>
                            <InputTextArea @bind-Value="editingMenu!.Description" 
                                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                                           rows="3" 
                                           placeholder="Kategori a√ßƒ±klamasƒ±..." />
                            <ValidationMessage For="@(() => editingMenu!.Description)" class="text-red-500 text-sm mt-1" />
                        </div>

                        <div class="mb-6 text-left">
                            <label class="flex items-center">
                                <InputCheckbox @bind-Value="editingMenu!.IsActive" class="mr-2" />
                                <span class="text-sm text-gray-700">Aktif kategori</span>
                            </label>
                        </div>

                        <div class="flex space-x-3">
                            <button type="submit" 
                                    class="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
                                @(editingMenu?.Id == 0 ? "Ekle" : "G√ºncelle")
                            </button>
                            <button type="button" @onclick="CloseModal" 
                                    class="flex-1 bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">
                                ƒ∞ptal
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }

    <!-- Delete Confirmation Modal -->
    @if (showDeleteModal)
    {
        <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3 text-center">
                    <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 mb-4">
                        <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                    </div>
                    <h3 class="text-lg font-medium text-gray-900 mb-4">Kategori Sil</h3>
                    <p class="text-sm text-gray-500 mb-2">Bu kategoriyi silmek istediƒüinizden emin misiniz?</p>
                    <p class="text-sm font-medium text-red-600 mb-6">
                        <strong>"@menuToDelete?.Name"</strong> kategorisi ve i√ßindeki t√ºm men√º √∂ƒüeleri kalƒ±cƒ± olarak silinecektir.
                    </p>
                    
                    <div class="flex space-x-3">
                        <button @onclick="ConfirmDelete" 
                                class="flex-1 bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded">
                            Evet, Sil
                        </button>
                        <button @onclick="CloseDeleteModal" 
                                class="flex-1 bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">
                            ƒ∞ptal
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<MenuModel> menus = new();
    private MenuModel? editingMenu;
    private MenuModel? menuToDelete;
    private bool showModal = false;
    private bool showDeleteModal = false;
    private string successMessage = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadMenus();
    }

    private async Task LoadMenus()
    {
        try
        {
            menus = (await MenuRepository.GetAllWithItemsAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "Men√ºler y√ºklenirken hata olu≈ütu: " + ex.Message;
        }
    }

    private void ShowAddModal()
    {
        editingMenu = new MenuModel
        {
            Id = 0,
            IsActive = true,
            CreatedAt = DateTime.Now
        };
        showModal = true;
        ClearMessages();
    }

    private void ShowEditModal(MenuModel menu)
    {
        editingMenu = new MenuModel
        {
            Id = menu.Id,
            Name = menu.Name,
            Description = menu.Description,
            IsActive = menu.IsActive,
            CreatedAt = menu.CreatedAt
        };
        showModal = true;
        ClearMessages();
    }

    private void ShowDeleteModal(MenuModel menu)
    {
        menuToDelete = menu;
        showDeleteModal = true;
        ClearMessages();
    }

    private void CloseModal()
    {
        showModal = false;
        editingMenu = null;
        ClearMessages();
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        menuToDelete = null;
        ClearMessages();
    }

    private async Task SaveMenu()
    {
        try
        {
            if (editingMenu == null) return;

            if (string.IsNullOrWhiteSpace(editingMenu.Name))
            {
                errorMessage = "Kategori adƒ± bo≈ü olamaz.";
                return;
            }

            // Check if category name already exists (except current one when editing)
            var existingMenu = menus.FirstOrDefault(m => 
                m.Name.Equals(editingMenu.Name, StringComparison.OrdinalIgnoreCase) && 
                m.Id != editingMenu.Id);
            
            if (existingMenu != null)
            {
                errorMessage = "Bu kategori adƒ± zaten mevcut.";
                return;
            }

            if (editingMenu.Id == 0)
            {
                await MenuRepository.CreateAsync(editingMenu);
                successMessage = "Kategori ba≈üarƒ±yla eklendi!";
            }
            else
            {
                await MenuRepository.UpdateAsync(editingMenu);
                successMessage = "Kategori ba≈üarƒ±yla g√ºncellendi!";
            }

            await LoadMenus();
            CloseModal();
            
            // Clear success message after 3 seconds
            await Task.Delay(3000);
            successMessage = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "ƒ∞≈ülem sƒ±rasƒ±nda hata olu≈ütu: " + ex.Message;
        }
    }

    private async Task ConfirmDelete()
    {
        try
        {
            if (menuToDelete == null) return;

            await MenuRepository.DeleteAsync(menuToDelete.Id);
            successMessage = $"'{menuToDelete.Name}' kategorisi ba≈üarƒ±yla silindi!";
            
            await LoadMenus();
            CloseDeleteModal();
            
            // Clear success message after 3 seconds
            await Task.Delay(3000);
            successMessage = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "Kategori silinirken hata olu≈ütu: " + ex.Message;
            CloseDeleteModal();
        }
    }

    private void ViewMenuItems(int menuId)
    {
        Navigation.NavigateTo($"/admin/menu-items/{menuId}");
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/admin");
    }

    private void ClearMessages()
    {
        successMessage = "";
        errorMessage = "";
        StateHasChanged();
    }
}