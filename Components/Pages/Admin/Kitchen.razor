@page "/admin/kitchen"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using RestaurantOrdering.Models
@using RestaurantOrdering.Repositories
@inject IOrderRepository OrderRepository
@inject ITableRepository TableRepository
@inject NavigationManager Navigation
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Mutfak - Admin</PageTitle>

<div class="container mx-auto px-4 py-6">
    <!-- Header Section -->
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-800 mb-2">üç≥ Mutfak Ekranƒ±</h1>
            <p class="text-gray-600">Onaylanmƒ±≈ü sipari≈üleri i≈üleme alƒ±n ve hazƒ±r duruma getirin</p>
        </div>
        <div class="flex items-center space-x-4">
            <!-- Auto refresh toggle -->
            <label class="flex items-center space-x-2">
                <input type="checkbox" @bind="autoRefresh" @bind:after="ToggleAutoRefresh" class="rounded border-gray-300" />
                <span class="text-sm text-gray-600">Otomatik Yenile</span>
            </label>
            
            <!-- Last update time -->
            <div class="text-sm text-gray-500">
                Son g√ºncelleme: @lastUpdateTime.ToString("HH:mm:ss")
            </div>
            
            <!-- Manual refresh button -->
            <button @onclick="RefreshData" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Yenile
            </button>
        </div>
    </div>

    <!-- Success/Error Messages -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            @errorMessage
        </div>
    }

    <!-- Kitchen Tables Grid -->
    @if (isLoading)
    {
        <div class="text-center py-12">
            <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500 mx-auto mb-4"></div>
            <p class="text-gray-600">Mutfak sipari≈üleri y√ºkleniyor...</p>
        </div>
    }
    else if (!kitchenTables?.Any() == true)
    {
        <div class="text-center py-12">
            <div class="text-gray-400 text-6xl mb-4">üçΩÔ∏è</div>
            <h3 class="text-xl font-semibold text-gray-700 mb-2">Mutfakta bekleyen sipari≈ü yok</h3>
            <p class="text-gray-500">Yeni sipari≈üler geldiƒüinde burada g√∂r√ºnecektir.</p>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            @foreach (var table in kitchenTables!)
            {
                <div class="bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 cursor-pointer"
                     @onclick="() => NavigateToTableDetails(table.TableNumber)">
                    
                    <!-- Table Header -->
                    <div class="bg-gradient-to-r from-orange-500 to-red-500 text-white p-4 rounded-t-xl">
                        <div class="flex justify-between items-center">
                            <div class="flex items-center gap-2">
                                <h3 class="text-xl font-bold">Masa @table.TableNumber</h3>
                                @if (table.Orders.Any(o => !string.IsNullOrWhiteSpace(o.Notes)))
                                {
                                    <div class="bg-yellow-400 text-yellow-900 text-xs px-2 py-1 rounded-full font-bold animate-pulse" title="Bu masada √∂zel istekli sipari≈üler var!">
                                        üìù NOT
                                    </div>
                                }
                            </div>
                            <div class="text-sm bg-orange-600 text-white px-2 py-1 rounded font-semibold">
                                @table.OrderCount sipari≈ü
                            </div>
                        </div>
                        <div class="text-sm opacity-90 mt-1">
                            En eski: @table.OldestOrderTime.ToString("HH:mm")
                        </div>
                    </div>

                    <!-- Orders Preview -->
                    <div class="p-4">
                        <div class="space-y-3 mb-4">
                            @foreach (var order in table.Orders.Take(3))
                            {
                                <div class="flex justify-between items-center p-2 bg-gray-50 rounded-lg">
                                    <div class="flex-1">
                                        <div class="font-medium text-sm text-gray-800">@order.MenuItem.Name</div>
                                        <div class="text-xs text-gray-600">
                                            Adet: @order.Quantity
                                            @if (!string.IsNullOrEmpty(order.Notes))
                                            {
                                                <span class="text-orange-600"> ‚Ä¢ @order.Notes</span>
                                            }
                                        </div>
                                    </div>
                                    <div class="ml-2">
                                        <span class="@GetStatusBadgeClass(order.Status) px-2 py-1 rounded-full text-xs font-medium">
                                            @GetStatusText(order.Status)
                                        </span>
                                    </div>
                                </div>
                            }
                            
                            @if (table.Orders.Count > 3)
                            {
                                <div class="text-center text-sm text-gray-500 py-2">
                                    +@(table.Orders.Count - 3) daha...
                                </div>
                            }
                        </div>

                        <!-- Table Actions -->
                        <div class="border-t pt-3">
                            <div class="grid grid-cols-2 gap-2">
                                <!-- Quick Actions -->
                                @if (table.Orders.Any(o => o.Status == OrderStatus.Confirmed))
                                {
                                    <button @onclick:stopPropagation="true" @onclick="() => StartPreparingAll(table.TableNumber)" 
                                            class="bg-orange-500 hover:bg-orange-600 text-white text-sm font-medium py-2 px-3 rounded-lg transition-colors">
                                        <svg class="w-4 h-4 mr-1 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                        ƒ∞≈üleme Al
                                    </button>
                                }
                                
                                @if (table.Orders.Any(o => o.Status == OrderStatus.Preparing))
                                {
                                    <button @onclick:stopPropagation="true" @onclick="() => MarkAllReady(table.TableNumber)" 
                                            class="bg-green-500 hover:bg-green-600 text-white text-sm font-medium py-2 px-3 rounded-lg transition-colors">
                                        <svg class="w-4 h-4 mr-1 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                        </svg>
                                        Hazƒ±r
                                    </button>
                                }
                            </div>
                            
                            <!-- View Details Button -->
                            <button @onclick:stopPropagation="true" @onclick="() => NavigateToTableDetails(table.TableNumber)" 
                                    class="w-full mt-2 bg-gray-100 hover:bg-gray-200 text-gray-700 text-sm font-medium py-2 px-3 rounded-lg transition-colors">
                                Detaylarƒ± G√∂r√ºnt√ºle
                            </button>
                        </div>
                    </div>

                    <!-- Urgency Indicator -->
                    @if (table.WaitingMinutes > 15)
                    {
                        <div class="absolute top-2 right-2 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full animate-pulse">
                            @table.WaitingMinutes dk
                        </div>
                    }
                    else if (table.WaitingMinutes > 10)
                    {
                        <div class="absolute top-2 right-2 bg-yellow-500 text-white text-xs font-bold px-2 py-1 rounded-full">
                            @table.WaitingMinutes dk
                        </div>
                    }
                </div>
            }
        </div>

        <!-- Summary Statistics -->
        <div class="mt-8 grid grid-cols-2 md:grid-cols-4 gap-4">
            <div class="bg-blue-50 p-4 rounded-lg">
                <div class="text-2xl font-bold text-blue-600">@kitchenTables.Count()</div>
                <div class="text-sm text-blue-600">Aktif Masa</div>
            </div>
            <div class="bg-orange-50 p-4 rounded-lg">
                <div class="text-2xl font-bold text-orange-600">@kitchenTables.Sum(t => t.Orders.Count(o => o.Status == OrderStatus.Confirmed))</div>
                <div class="text-sm text-orange-600">Bekleyen Sipari≈ü</div>
            </div>
            <div class="bg-yellow-50 p-4 rounded-lg">
                <div class="text-2xl font-bold text-yellow-600">@kitchenTables.Sum(t => t.Orders.Count(o => o.Status == OrderStatus.Preparing))</div>
                <div class="text-sm text-yellow-600">Hazƒ±rlanƒ±yor</div>
            </div>
            <div class="bg-green-50 p-4 rounded-lg">
                <div class="text-2xl font-bold text-green-600">@kitchenTables.Sum(t => t.Orders.Count(o => o.Status == OrderStatus.Ready))</div>
                <div class="text-sm text-green-600">Hazƒ±r</div>
            </div>
        </div>
    }
</div>

@code {
    private List<KitchenTable>? kitchenTables;
    private bool isLoading = true;
    private bool autoRefresh = true;
    private Timer? refreshTimer;
    private DateTime lastUpdateTime = DateTime.Now;
    private string successMessage = "";
    private string errorMessage = "";

    public class KitchenTable
    {
        public int TableNumber { get; set; }
        public List<Order> Orders { get; set; } = new();
        public int OrderCount => Orders.Count;
        public DateTime OldestOrderTime => Orders.Min(o => o.OrderDate);
        public int WaitingMinutes => (int)(DateTime.Now - OldestOrderTime).TotalMinutes;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadKitchenData();
        SetupAutoRefresh();
    }

    private async Task LoadKitchenData()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            // Sadece onaylanmƒ±≈ü, hazƒ±rlanƒ±yor ve hazƒ±r durumundaki sipari≈üleri getir
            var orders = await OrderRepository.GetPendingOrdersAsync();
            var kitchenOrders = orders.Where(o => o.Status == OrderStatus.Confirmed || 
                                                 o.Status == OrderStatus.Preparing || 
                                                 o.Status == OrderStatus.Ready).ToList();

            // Masalara g√∂re grupla
            kitchenTables = kitchenOrders
                .GroupBy(o => o.TableId)
                .Select(g => new KitchenTable
                {
                    TableNumber = g.First().Table.TableNumber,
                    Orders = g.OrderBy(o => o.OrderDate).ToList()
                })
                .OrderBy(t => t.OldestOrderTime)
                .ToList();

            lastUpdateTime = DateTime.Now;
        }
        catch (Exception ex)
        {
            errorMessage = "Mutfak verileri y√ºklenirken hata olu≈ütu: " + ex.Message;
            Console.WriteLine($"Error loading kitchen data: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SetupAutoRefresh()
    {
        if (autoRefresh)
        {
            refreshTimer = new Timer(async _ =>
            {
                try
                {
                    await InvokeAsync(async () =>
                    {
                        await LoadKitchenData();
                    });
                }
                catch (ObjectDisposedException)
                {
                    // Component has been disposed, stop the timer
                    refreshTimer?.Dispose();
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Auto-refresh error: {ex}");
                }
            }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
        }
    }

    private void ToggleAutoRefresh()
    {
        refreshTimer?.Dispose();
        if (autoRefresh)
        {
            SetupAutoRefresh();
        }
    }

    private async Task RefreshData()
    {
        await LoadKitchenData();
    }

    private async Task StartPreparingAll(int tableNumber)
    {
        try
        {
            var table = kitchenTables?.FirstOrDefault(t => t.TableNumber == tableNumber);
            if (table != null)
            {
                var confirmedOrders = table.Orders.Where(o => o.Status == OrderStatus.Confirmed);
                foreach (var order in confirmedOrders)
                {
                    await OrderRepository.UpdateStatusAsync(order.Id, OrderStatus.Preparing);
                }
                
                successMessage = $"Masa {tableNumber} sipari≈üleri i≈üleme alƒ±ndƒ±.";
                await LoadKitchenData();
                
                // Auto-hide success message
                _ = Task.Delay(3000).ContinueWith(_ =>
                {
                    successMessage = "";
                    InvokeAsync(StateHasChanged);
                });
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Sipari≈üler i≈üleme alƒ±nƒ±rken hata olu≈ütu.";
            Console.WriteLine($"Error starting preparation: {ex}");
        }
    }

    private async Task MarkAllReady(int tableNumber)
    {
        try
        {
            var table = kitchenTables?.FirstOrDefault(t => t.TableNumber == tableNumber);
            if (table != null)
            {
                var preparingOrders = table.Orders.Where(o => o.Status == OrderStatus.Preparing);
                foreach (var order in preparingOrders)
                {
                    await OrderRepository.UpdateStatusAsync(order.Id, OrderStatus.Ready);
                }
                
                successMessage = $"Masa {tableNumber} sipari≈üleri hazƒ±r olarak i≈üaretlendi.";
                await LoadKitchenData();
                
                // Auto-hide success message
                _ = Task.Delay(3000).ContinueWith(_ =>
                {
                    successMessage = "";
                    InvokeAsync(StateHasChanged);
                });
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Sipari≈üler hazƒ±r olarak i≈üaretlenirken hata olu≈ütu.";
            Console.WriteLine($"Error marking ready: {ex}");
        }
    }

    private void NavigateToTableDetails(int tableNumber)
    {
        try
        {
            var url = $"/admin/kitchen/table/{tableNumber}";
            Console.WriteLine($"Navigating to: {url}");
            Navigation.NavigateTo(url);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Navigation error: {ex}");
            errorMessage = "Sayfa y√∂nlendirmede hata olu≈ütu.";
            StateHasChanged();
        }
    }

    private string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Confirmed => "bg-blue-100 text-blue-800",
            OrderStatus.Preparing => "bg-orange-100 text-orange-800",
            OrderStatus.Ready => "bg-green-100 text-green-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetStatusText(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Confirmed => "Onaylandƒ±",
            OrderStatus.Preparing => "Hazƒ±rlanƒ±yor",
            OrderStatus.Ready => "Hazƒ±r",
            _ => status.ToString()
        };
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}
