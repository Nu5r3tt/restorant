@page "/admin/kitchen/table/{TableNumber:int}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components
@using RestaurantOrdering.Models
@using RestaurantOrdering.Repositories
@inject IOrderRepository OrderRepository
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Masa @TableNumber Sipari≈üleri - Mutfak</PageTitle>

<div class="container mx-auto px-4 py-6">
    <!-- Header Section -->
    <div class="flex justify-between items-center mb-6">
        <div>
            <h1 class="text-3xl font-bold text-gray-800 mb-2">üçΩÔ∏è Masa @TableNumber</h1>
            <p class="text-gray-600">Mutfak sipari≈ü detaylarƒ± ve i≈ülem paneli</p>
        </div>
        <div class="flex space-x-3">
            <button @onclick="RefreshData" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">
                <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Yenile
            </button>
            <a href="/admin/kitchen" class="bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded-lg transition-colors inline-block text-decoration-none">
                ‚Üê Mutfak Ana Sayfa
            </a>
        </div>
    </div>

    <!-- Success/Error Messages -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
            @successMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            @errorMessage
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center py-12">
            <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500 mx-auto mb-4"></div>
            <p class="text-gray-600">Masa sipari≈üleri y√ºkleniyor...</p>
        </div>
    }
    else if (!orders?.Any() == true)
    {
        <div class="text-center py-12">
            <div class="text-gray-400 text-6xl mb-4">üçΩÔ∏è</div>
            <h3 class="text-xl font-semibold text-gray-700 mb-2">Bu masada aktif sipari≈ü yok</h3>
            <p class="text-gray-500">Sipari≈ü hazƒ±rlanmƒ±≈ü veya hen√ºz sipari≈ü gelmemi≈ü olabilir.</p>
        </div>
    }
    else
    {
        <!-- Quick Actions Bar -->
        <div class="bg-white rounded-lg shadow-md p-4 mb-6">
            <div class="flex flex-wrap gap-3">
                @if (orders?.Any(o => o.Status == OrderStatus.Confirmed) == true)
                {
                    <button @onclick="StartPreparingAll" 
                            class="bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                        <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        T√ºm Sipari≈üleri ƒ∞≈üleme Al (@orders.Count(o => o.Status == OrderStatus.Confirmed) adet)
                    </button>
                }
                
                @if (orders?.Any(o => o.Status == OrderStatus.Preparing) == true)
                {
                    <button @onclick="MarkAllReady" 
                            class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                        <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        T√ºm√ºn√º Hazƒ±r ƒ∞≈üaretle (@orders.Count(o => o.Status == OrderStatus.Preparing) adet)
                    </button>
                }
            </div>
        </div>

        <!-- Orders List -->
        <div class="space-y-4">
            @foreach (var order in orders?.OrderBy(o => o.OrderDate) ?? Enumerable.Empty<Order>())
            {
                <div class="bg-white rounded-lg shadow-md overflow-hidden @GetOrderBorderClass(order.Status)">
                    <div class="p-6">
                        <div class="flex justify-between items-start mb-4">
                            <!-- Order Info -->
                            <div class="flex-1">
                                <div class="flex items-center space-x-3 mb-2">
                                    <h3 class="text-xl font-bold text-gray-800">@order.MenuItem.Name</h3>
                                    <span class="@GetStatusBadgeClass(order.Status) px-3 py-1 rounded-full text-sm font-medium">
                                        @GetStatusText(order.Status)
                                    </span>
                                </div>
                                
                                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-600">
                                    <div>
                                        <span class="font-medium">Sipari≈ü Zamanƒ±:</span>
                                        <div>@order.OrderDate.ToString("HH:mm:ss")</div>
                                        <div class="text-xs">@order.OrderDate.ToString("dd.MM.yyyy")</div>
                                    </div>
                                    
                                    <div>
                                        <span class="font-medium">Adet:</span>
                                        <div class="text-2xl font-bold text-blue-600">@order.Quantity</div>
                                    </div>
                                    
                                    <div>
                                        <span class="font-medium">Ge√ßen S√ºre:</span>
                                        <div class="@GetTimeClass(order.OrderDate)">
                                            @GetWaitingTime(order.OrderDate)
                                        </div>
                                    </div>
                                </div>

                                @if (!string.IsNullOrEmpty(order.Notes))
                                {
                                    <div class="mt-3 p-3 bg-yellow-50 border-l-4 border-yellow-400 rounded">
                                        <div class="font-medium text-yellow-800 text-sm">üìù √ñzel Not:</div>
                                        <div class="text-yellow-700">@order.Notes</div>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="flex flex-wrap gap-2 pt-4 border-t">
                            @if (order.Status == OrderStatus.Confirmed)
                            {
                                <button @onclick="() => UpdateOrderStatus(order.Id, OrderStatus.Preparing)" 
                                        class="bg-orange-500 hover:bg-orange-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                                    <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    ƒ∞≈üleme Al
                                </button>
                            }
                            
                            @if (order.Status == OrderStatus.Preparing)
                            {
                                <button @onclick="() => UpdateOrderStatus(order.Id, OrderStatus.Ready)" 
                                        class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded-lg transition-colors">
                                    <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                    </svg>
                                    Hazƒ±r
                                </button>
                            }

                            @if (order.Status == OrderStatus.Ready)
                            {
                                <div class="bg-green-100 text-green-800 px-4 py-2 rounded-lg font-medium">
                                    ‚úÖ Hazƒ±r - Servise Bekliyor
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Summary -->
        <div class="mt-6 bg-gray-50 rounded-lg p-4">
            <h3 class="font-bold text-gray-800 mb-3">Masa √ñzeti</h3>
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div>
                    <div class="font-medium text-gray-600">Toplam Sipari≈ü</div>
                    <div class="text-xl font-bold">@(orders?.Count() ?? 0)</div>
                </div>
                <div>
                    <div class="font-medium text-orange-600">Bekleyen</div>
                    <div class="text-xl font-bold text-orange-600">@(orders?.Count(o => o.Status == OrderStatus.Confirmed) ?? 0)</div>
                </div>
                <div>
                    <div class="font-medium text-yellow-600">Hazƒ±rlanƒ±yor</div>
                    <div class="text-xl font-bold text-yellow-600">@(orders?.Count(o => o.Status == OrderStatus.Preparing) ?? 0)</div>
                </div>
                <div>
                    <div class="font-medium text-green-600">Hazƒ±r</div>
                    <div class="text-xl font-bold text-green-600">@(orders?.Count(o => o.Status == OrderStatus.Ready) ?? 0)</div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int TableNumber { get; set; }
    
    private List<Order>? orders;
    private bool isLoading = true;
    private string successMessage = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"KitchenTable: Loading orders for table {TableNumber}");
        await LoadOrders();
    }

    private async Task LoadOrders()
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            Console.WriteLine($"KitchenTable: Loading orders for table {TableNumber}");
            
            // Sadece mutfak i≈ülemlerinde olan sipari≈üleri getir
            var allOrders = await OrderRepository.GetPendingOrdersByTableIdAsync(TableNumber);
            orders = allOrders.Where(o => o.Status == OrderStatus.Confirmed || 
                                       o.Status == OrderStatus.Preparing || 
                                       o.Status == OrderStatus.Ready).ToList();
            
            Console.WriteLine($"KitchenTable: Found {orders.Count} orders for table {TableNumber}");
        }
        catch (Exception ex)
        {
            errorMessage = "Sipari≈üler y√ºklenirken hata olu≈ütu: " + ex.Message;
            Console.WriteLine($"KitchenTable: Error loading orders: {ex}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }    private async Task UpdateOrderStatus(int orderId, OrderStatus newStatus)
    {
        try
        {
            await OrderRepository.UpdateStatusAsync(orderId, newStatus);
            
            var statusText = GetStatusText(newStatus);
            successMessage = $"Sipari≈ü durumu '{statusText}' olarak g√ºncellendi.";
            
            await LoadOrders();
            
            // Auto-hide success message
            _ = Task.Delay(3000).ContinueWith(_ =>
            {
                successMessage = "";
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            errorMessage = "Sipari≈ü durumu g√ºncellenirken hata olu≈ütu.";
            Console.WriteLine($"Error updating order status: {ex}");
        }
    }

    private async Task StartPreparingAll()
    {
        try
        {
            var confirmedOrders = orders?.Where(o => o.Status == OrderStatus.Confirmed);
            if (confirmedOrders?.Any() == true)
            {
                foreach (var order in confirmedOrders)
                {
                    await OrderRepository.UpdateStatusAsync(order.Id, OrderStatus.Preparing);
                }
                
                successMessage = $"{confirmedOrders.Count()} sipari≈ü i≈üleme alƒ±ndƒ±.";
                await LoadOrders();
                
                // Auto-hide success message
                _ = Task.Delay(3000).ContinueWith(_ =>
                {
                    successMessage = "";
                    InvokeAsync(StateHasChanged);
                });
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Sipari≈üler i≈üleme alƒ±nƒ±rken hata olu≈ütu.";
            Console.WriteLine($"Error starting preparation: {ex}");
        }
    }

    private async Task MarkAllReady()
    {
        try
        {
            var preparingOrders = orders?.Where(o => o.Status == OrderStatus.Preparing);
            if (preparingOrders?.Any() == true)
            {
                foreach (var order in preparingOrders)
                {
                    await OrderRepository.UpdateStatusAsync(order.Id, OrderStatus.Ready);
                }
                
                successMessage = $"{preparingOrders.Count()} sipari≈ü hazƒ±r olarak i≈üaretlendi.";
                await LoadOrders();
                
                // Auto-hide success message
                _ = Task.Delay(3000).ContinueWith(_ =>
                {
                    successMessage = "";
                    InvokeAsync(StateHasChanged);
                });
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Sipari≈üler hazƒ±r olarak i≈üaretlenirken hata olu≈ütu.";
            Console.WriteLine($"Error marking ready: {ex}");
        }
    }

    private async Task RefreshData()
    {
        await LoadOrders();
    }

    private string GetOrderBorderClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Confirmed => "border-l-4 border-blue-400",
            OrderStatus.Preparing => "border-l-4 border-orange-400",
            OrderStatus.Ready => "border-l-4 border-green-400",
            _ => ""
        };
    }

    private string GetStatusBadgeClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Confirmed => "bg-blue-100 text-blue-800",
            OrderStatus.Preparing => "bg-orange-100 text-orange-800",
            OrderStatus.Ready => "bg-green-100 text-green-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetStatusText(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Confirmed => "Onaylandƒ±",
            OrderStatus.Preparing => "Hazƒ±rlanƒ±yor",
            OrderStatus.Ready => "Hazƒ±r",
            _ => status.ToString()
        };
    }

    private string GetWaitingTime(DateTime orderDate)
    {
        var elapsed = DateTime.Now - orderDate;
        if (elapsed.TotalMinutes < 1)
            return "Az √∂nce";
        else if (elapsed.TotalMinutes < 60)
            return $"{(int)elapsed.TotalMinutes} dakika";
        else
            return $"{(int)elapsed.TotalHours} saat {(int)(elapsed.TotalMinutes % 60)} dakika";
    }

    private string GetTimeClass(DateTime orderDate)
    {
        var minutes = (DateTime.Now - orderDate).TotalMinutes;
        if (minutes > 20)
            return "text-red-600 font-bold";
        else if (minutes > 10)
            return "text-yellow-600 font-bold";
        else
            return "text-green-600";
    }
}
