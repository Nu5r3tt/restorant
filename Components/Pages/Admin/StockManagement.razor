@page "/admin/stok-yonetimi"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using RestaurantOrdering.Models
@using RestaurantOrdering.Repositories
@inject IStockRepository StockRepository
@inject IStockMovementRepository StockMovementRepository
@inject ISupplierRepository SupplierRepository
@inject ITaxRateRepository TaxRateRepository
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<title>Professional Stok Yönetimi</title>

<div class="min-h-screen bg-gradient-to-br from-gray-50 to-blue-50 p-6">
    <!-- Professional Header Section -->
    <div class="bg-white rounded-3xl shadow-2xl border border-gray-100 mb-8 p-8">
        <div class="flex items-center justify-between">
            <div class="flex items-center gap-6">
                <div class="w-16 h-16 bg-gradient-to-r from-emerald-500 to-emerald-600 rounded-2xl flex items-center justify-center shadow-lg">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
                    </svg>
                </div>
                <div>
                    <h1 class="text-4xl font-bold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent">
                        Professional Stok Yönetimi
                    </h1>
                    <p class="text-gray-600 text-lg mt-2">Gelişmiş envanter takip ve toplu stok giriş sistemi</p>
                </div>
            </div>
            
            <!-- Action Buttons -->
            <div class="flex gap-4">
                <button type="button" @onclick="OpenBulkStockModal" 
                        class="px-6 py-3 bg-gradient-to-r from-emerald-500 to-emerald-600 text-white rounded-xl hover:from-emerald-600 hover:to-emerald-700 transition-all duration-300 shadow-lg hover:shadow-xl font-semibold flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                    </svg>
                    Toplu Stok Girişi
                </button>
                
                <button type="button" @onclick="RefreshData" 
                        class="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl hover:from-blue-600 hover:to-blue-700 transition-all duration-300 shadow-lg hover:shadow-xl font-semibold flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    Yenile
                </button>
            </div>
        </div>
    </div>

    <!-- Alert Messages -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="bg-emerald-50 border border-emerald-200 rounded-2xl p-6 mb-6 shadow-lg">
            <div class="flex items-center gap-3">
                <svg class="w-6 h-6 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span class="text-emerald-800 font-semibold">@successMessage</span>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-50 border border-red-200 rounded-2xl p-6 mb-6 shadow-lg">
            <div class="flex items-center gap-3">
                <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span class="text-red-800 font-semibold">@errorMessage</span>
            </div>
        </div>
    }

    <!-- Statistics Cards -->
    <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-600 text-sm font-semibold">Toplam Stok Kalemi</p>
                    <p class="text-3xl font-bold text-gray-900 mt-2">@totalStockItems</p>
                </div>
                <div class="w-12 h-12 bg-blue-100 rounded-xl flex items-center justify-center">
                    <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
                    </svg>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-600 text-sm font-semibold">Normal Stok</p>
                    <p class="text-3xl font-bold text-emerald-600 mt-2">@inStockCount</p>
                </div>
                <div class="w-12 h-12 bg-emerald-100 rounded-xl flex items-center justify-center">
                    <svg class="w-6 h-6 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-600 text-sm font-semibold">Düşük Stok</p>
                    <p class="text-3xl font-bold text-amber-600 mt-2">@lowStockCount</p>
                </div>
                <div class="w-12 h-12 bg-amber-100 rounded-xl flex items-center justify-center">
                    <svg class="w-6 h-6 text-amber-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                    </svg>
                </div>
            </div>
        </div>

        <div class="bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
            <div class="flex items-center justify-between">
                <div>
                    <p class="text-gray-600 text-sm font-semibold">Toplam Değer</p>
                    <p class="text-3xl font-bold text-purple-600 mt-2">₺@totalStockValue.ToString("N2")</p>
                </div>
                <div class="w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center">
                    <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                    </svg>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8">
        <h3 class="text-xl font-bold text-gray-900 mb-6">Filtreler</h3>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div>
                <label class="block text-sm font-semibold text-gray-700 mb-2">Kategori</label>
                <select @bind="selectedCategory" 
                        class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">Tümü</option>
                    @foreach (RestaurantOrdering.Models.StockCategory category in Enum.GetValues<RestaurantOrdering.Models.StockCategory>())
                    {
                        <option value="@((int)category)">@GetCategoryDisplayName(category)</option>
                    }
                </select>
            </div>

            <div>
                <label class="block text-sm font-semibold text-gray-700 mb-2">Durum</label>
                <select @bind="statusFilter" 
                        class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="all">Tümü</option>
                    <option value="inStock">Normal Stok</option>
                    <option value="lowStock">Düşük Stok</option>
                </select>
            </div>

            <div>
                <label class="block text-sm font-semibold text-gray-700 mb-2">Arama</label>
                <input type="text" @bind="searchTerm" @oninput="ApplyFilters" 
                       class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" 
                       placeholder="Stok adı ara..." />
            </div>

            <div class="flex items-end">
                <button type="button" @onclick="ClearFilters" 
                        class="w-full px-4 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors duration-200 font-semibold">
                    Filtreleri Temizle
                </button>
            </div>
        </div>
    </div>

    <!-- Stock Items Table -->
    <div class="bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden">
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Stok Kalemi</th>
                        <th class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Kategori</th>
                        <th class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Mevcut Miktar</th>
                        <th class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Birim</th>
                        <th class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Durum</th>
                        <th class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Tedarikçi</th>
                        <th class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">KDV Oranı</th>
                        <th class="px-6 py-4 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">İşlemler</th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-100">
                    @foreach (var stock in filteredStocks)
                    {
                        <tr class="hover:bg-blue-50/50 transition-all duration-200">
                            <td class="px-6 py-4">
                                <div class="flex items-center gap-3">
                                    <div class="w-10 h-10 bg-gradient-to-r from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
                                        <span class="text-white font-bold text-sm">@stock.Name.Substring(0, 1).ToUpper()</span>
                                    </div>
                                    <div>
                                        <div class="text-sm font-bold text-gray-900">@stock.Name</div>
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-4">
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                    @GetCategoryDisplayName(stock.Category)
                                </span>
                            </td>
                            <td class="px-6 py-4">
                                <div class="text-sm font-bold text-gray-900">@stock.CurrentQuantity</div>
                            </td>
                            <td class="px-6 py-4">
                                <div class="text-sm text-gray-900">@stock.Unit</div>
                            </td>
                            <td class="px-6 py-4">
                                <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium @(stock.IsLowStock ? "bg-red-100 text-red-800" : "bg-emerald-100 text-emerald-800")">
                                    @stock.StatusText
                                </span>
                            </td>
                            <td class="px-6 py-4">
                                <div class="text-sm text-gray-600">@(stock.Supplier?.Name ?? "Belirtilmemiş")</div>
                            </td>
                            <td class="px-6 py-4">
                                <div class="text-sm text-gray-600">@(stock.TaxRate != null ? $"%{stock.TaxRate.Rate}" : "Belirtilmemiş")</div>
                            </td>
                            <td class="px-6 py-4">
                                <div class="flex gap-2">
                                    <button type="button" @onclick="() => OpenStockMovementModal(stock)" 
                                            class="px-3 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors duration-200 text-xs font-semibold">
                                        Hareket
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <!-- Bulk Stock Entry Modal -->
    @if (showBulkStockModal)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div class="bg-white rounded-2xl shadow-2xl max-w-6xl w-full max-h-[90vh] overflow-hidden">
                <div class="px-8 py-6 border-b border-gray-200 bg-gradient-to-r from-emerald-500 to-emerald-600">
                    <div class="flex items-center justify-between">
                        <h2 class="text-2xl font-bold text-white">Toplu Stok Girişi</h2>
                        <button type="button" @onclick="CloseBulkStockModal" 
                                class="text-white hover:text-gray-200 transition-colors duration-200">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="p-8 max-h-[calc(90vh-140px)] overflow-y-auto">
                    <EditForm Model="bulkStockEntry" OnValidSubmit="SaveBulkStock">
                        <DataAnnotationsValidator />
                        
                        <!-- Form Header Controls -->
                        <div class="mb-8 p-6 bg-gray-50 rounded-xl">
                            <div class="flex items-center justify-between mb-4">
                                <h3 class="text-lg font-bold text-gray-900">Ürün Listesi</h3>
                                <button type="button" @onclick="AddNewStockItem" 
                                        class="px-4 py-2 bg-emerald-500 text-white rounded-lg hover:bg-emerald-600 transition-colors duration-200 font-semibold flex items-center gap-2">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                    </svg>
                                    Ürün Ekle
                                </button>
                            </div>
                            
                            @if (bulkStockEntry.Items?.Count == 0)
                            {
                                <div class="text-center py-8">
                                    <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
                                    </svg>
                                    <p class="text-gray-600 text-lg">Henüz ürün eklenmemiş</p>
                                    <p class="text-gray-500">Başlamak için "Ürün Ekle" butonuna tıklayın</p>
                                </div>
                            }
                        </div>

                        <!-- Stock Items List -->
                        @if (bulkStockEntry.Items?.Count > 0)
                        {
                            <div class="space-y-6 mb-8">
                                @for (int i = 0; i < bulkStockEntry.Items.Count; i++)
                                {
                                    var index = i;
                                    var item = bulkStockEntry.Items[index];
                                    
                                    <div class="border border-gray-200 rounded-xl p-6 bg-white shadow-sm">
                                        <div class="flex items-center justify-between mb-4">
                                            <h4 class="text-lg font-semibold text-gray-900">Ürün @(index + 1)</h4>
                                            <button type="button" @onclick="() => RemoveStockItem(index)" 
                                                    class="text-red-600 hover:text-red-800 transition-colors duration-200">
                                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                                </svg>
                                            </button>
                                        </div>
                                        
                                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                                            <!-- Ürün Adı -->
                                            <div>
                                                <label class="block text-sm font-semibold text-gray-700 mb-2">Ürün Adı *</label>
                                                <InputText @bind-Value="item.Name" 
                                                           class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent" 
                                                           placeholder="Ürün adını girin" />
                                                <ValidationMessage For="@(() => item.Name)" class="text-red-600 text-sm mt-1" />
                                            </div>

                                            <!-- Kategori -->
                                            <div>
                                                <label class="block text-sm font-semibold text-gray-700 mb-2">Kategori *</label>
                                                <InputSelect @bind-Value="item.Category" 
                                                             class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent">
                                                    <option value="">Kategori seçin</option>
                                                    @foreach (RestaurantOrdering.Models.StockCategory category in Enum.GetValues<RestaurantOrdering.Models.StockCategory>())
                                                    {
                                                        <option value="@category">@GetCategoryDisplayName(category)</option>
                                                    }
                                                </InputSelect>
                                                <ValidationMessage For="@(() => item.Category)" class="text-red-600 text-sm mt-1" />
                                            </div>

                                            <!-- Miktar -->
                                            <div>
                                                <label class="block text-sm font-semibold text-gray-700 mb-2">Miktar *</label>
                                                <InputNumber @bind-Value="item.CurrentQuantity" 
                                                             class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent" 
                                                             placeholder="0" step="0.01" />
                                                <ValidationMessage For="@(() => item.CurrentQuantity)" class="text-red-600 text-sm mt-1" />
                                            </div>

                                            <!-- Birim -->
                                            <div>
                                                <label class="block text-sm font-semibold text-gray-700 mb-2">Birim *</label>
                                                <InputSelect @bind-Value="item.Unit" 
                                                             class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent">
                                                    <option value="">Birim seçin</option>
                                                    @foreach (var unit in Enum.GetValues<RestaurantOrdering.Models.StockUnit>())
                                                    {
                                                        <option value="@GetUnitStringValue(unit)">@GetUnitDisplayName(unit)</option>
                                                    }
                                                </InputSelect>
                                                <ValidationMessage For="@(() => item.Unit)" class="text-red-600 text-sm mt-1" />
                                            </div>

                                            <!-- Tedarikçi -->
                                            <div>
                                                <label class="block text-sm font-semibold text-gray-700 mb-2">Tedarikçi</label>
                                                <InputSelect @bind-Value="item.SupplierId" 
                                                             class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent">
                                                    <option value="">Tedarikçi seçin</option>
                                                    @foreach (var supplier in suppliers)
                                                    {
                                                        <option value="@supplier.Id">@supplier.Name</option>
                                                    }
                                                </InputSelect>
                                            </div>

                                            <!-- KDV Oranı -->
                                            <div>
                                                <label class="block text-sm font-semibold text-gray-700 mb-2">KDV Oranı</label>
                                                <InputSelect @bind-Value="item.TaxRateId" 
                                                             class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent">
                                                    <option value="">KDV oranı seçin</option>
                                                    @foreach (var taxRate in taxRates)
                                                    {
                                                        <option value="@taxRate.Id">@taxRate.Name (%@taxRate.Rate)</option>
                                                    }
                                                </InputSelect>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                        <!-- Form Actions -->
                        <div class="flex justify-end gap-4 pt-6 border-t border-gray-200">
                            <button type="button" @onclick="CloseBulkStockModal" 
                                    class="px-6 py-3 bg-gray-100 text-gray-700 rounded-xl hover:bg-gray-200 transition-colors duration-200 font-semibold">
                                İptal
                            </button>
                            <button type="submit" disabled="@(bulkStockEntry.Items?.Count == 0)" 
                                    class="px-6 py-3 bg-gradient-to-r from-emerald-500 to-emerald-600 text-white rounded-xl hover:from-emerald-600 hover:to-emerald-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-300 shadow-lg hover:shadow-xl font-semibold">
                                @if (bulkStockEntry.Items?.Count > 0)
                                {
                                    <span>@bulkStockEntry.Items.Count Ürünü Kaydet</span>
                                }
                                else
                                {
                                    <span>Kaydet</span>
                                }
                            </button>
                        </div>

                        <ValidationSummary class="mt-4 text-red-600" />
                    </EditForm>
                </div>
            </div>
        </div>
    }

    <!-- Stock Movement Modal -->
    @if (showStockMovementModal && selectedStock != null)
    {
        <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full">
                <div class="px-6 py-4 border-b border-gray-200 bg-gradient-to-r from-blue-500 to-blue-600">
                    <div class="flex items-center justify-between">
                        <h2 class="text-xl font-bold text-white">Stok Hareketi - @selectedStock.Name</h2>
                        <button type="button" @onclick="CloseStockMovementModal" 
                                class="text-white hover:text-gray-200 transition-colors duration-200">
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </button>
                    </div>
                </div>

                <div class="p-6">
                    <EditForm Model="stockMovement" OnValidSubmit="SaveStockMovement">
                        <DataAnnotationsValidator />
                        
                        <div class="space-y-4">
                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Hareket Türü</label>
                                <InputSelect @bind-Value="stockMovement.Type" 
                                             class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <option value="">Seçin</option>
                                    @foreach (RestaurantOrdering.Models.StockMovementType type in Enum.GetValues<RestaurantOrdering.Models.StockMovementType>())
                                    {
                                        <option value="@type">@GetMovementTypeDisplayName(type)</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => stockMovement.Type)" class="text-red-600 text-sm mt-1" />
                            </div>

                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Miktar</label>
                                <InputNumber @bind-Value="stockMovement.Quantity" 
                                             class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" 
                                             placeholder="0" step="0.01" />
                                <ValidationMessage For="@(() => stockMovement.Quantity)" class="text-red-600 text-sm mt-1" />
                            </div>

                            <div>
                                <label class="block text-sm font-semibold text-gray-700 mb-2">Açıklama</label>
                                <InputTextArea @bind-Value="stockMovement.Notes" 
                                               class="w-full px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" 
                                               rows="3" 
                                               placeholder="Hareket açıklaması..." />
                            </div>
                        </div>

                        <div class="flex justify-end gap-4 mt-6 pt-4 border-t border-gray-200">
                            <button type="button" @onclick="CloseStockMovementModal" 
                                    class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors duration-200">
                                İptal
                            </button>
                            <button type="submit" 
                                    class="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-200">
                                Kaydet
                            </button>
                        </div>

                        <ValidationSummary class="mt-4 text-red-600" />
                    </EditForm>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<RestaurantOrdering.Models.Stock> stocks = new();
    private List<RestaurantOrdering.Models.Stock> filteredStocks = new();
    private List<RestaurantOrdering.Models.Supplier> suppliers = new();
    private List<RestaurantOrdering.Models.TaxRate> taxRates = new();
    
    // Statistics
    private int totalStockItems = 0;
    private int inStockCount = 0;
    private int lowStockCount = 0;
    private decimal totalStockValue = 0;

    // Filters
    private string selectedCategory = "";
    private string statusFilter = "all";
    private string searchTerm = "";

    // Modals
    private bool showBulkStockModal = false;
    private bool showStockMovementModal = false;
    private RestaurantOrdering.Models.Stock? selectedStock = null;

    // Forms
    private RestaurantOrdering.Models.BulkStockEntry bulkStockEntry = new();
    private RestaurantOrdering.Models.StockMovement stockMovement = new();

    // Messages
    private string successMessage = "";
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        try
        {
            stocks = (await StockRepository.GetAllAsync()).ToList();
            suppliers = (await SupplierRepository.GetAllAsync()).ToList();
            taxRates = (await TaxRateRepository.GetAllAsync()).ToList();
            
            CalculateStatistics();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = "Veriler yüklenirken hata oluştu: " + ex.Message;
        }
    }

    private void CalculateStatistics()
    {
        totalStockItems = stocks.Count;
        inStockCount = stocks.Count(s => !s.IsLowStock);
        lowStockCount = stocks.Count(s => s.IsLowStock);
        totalStockValue = stocks.Sum(s => s.CurrentQuantity * (s.PurchasePrice ?? 10));
    }

    private void ApplyFilters()
    {
        filteredStocks = stocks.AsQueryable().ToList();

        if (!string.IsNullOrEmpty(selectedCategory) && int.TryParse(selectedCategory, out int categoryId))
        {
            filteredStocks = filteredStocks.Where(s => (int)s.Category == categoryId).ToList();
        }

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filteredStocks = filteredStocks.Where(s => s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        switch (statusFilter)
        {
            case "inStock":
                filteredStocks = filteredStocks.Where(s => !s.IsLowStock).ToList();
                break;
            case "lowStock":
                filteredStocks = filteredStocks.Where(s => s.IsLowStock).ToList();
                break;
        }

        StateHasChanged();
    }

    private void ClearFilters()
    {
        selectedCategory = "";
        statusFilter = "all";
        searchTerm = "";
        ApplyFilters();
    }

    private void OpenBulkStockModal()
    {
        bulkStockEntry = new BulkStockEntry();
        showBulkStockModal = true;
        ClearMessages();
    }

    private void CloseBulkStockModal()
    {
        showBulkStockModal = false;
        bulkStockEntry = new BulkStockEntry();
    }

    private void AddNewStockItem()
    {
        bulkStockEntry.Items.Add(new StockEntryItem());
        StateHasChanged();
    }

    private void RemoveStockItem(int index)
    {
        if (index >= 0 && index < bulkStockEntry.Items.Count)
        {
            bulkStockEntry.Items.RemoveAt(index);
            StateHasChanged();
        }
    }

    private async Task SaveBulkStock()
    {
        try
        {
            foreach (var item in bulkStockEntry.Items)
            {
                var stock = new RestaurantOrdering.Models.Stock
                {
                    Name = item.Name,
                    Category = item.Category,
                    CurrentQuantity = item.CurrentQuantity,
                    MinimumQuantity = 0, // Default minimum quantity
                    Unit = item.Unit,
                    SupplierId = item.SupplierId,
                    TaxRateId = item.TaxRateId,
                    PurchasePrice = item.PurchasePrice,
                    CreatedAt = DateTime.Now
                };

                await StockRepository.CreateAsync(stock);
            }

            successMessage = $"{bulkStockEntry.Items.Count} adet ürün başarıyla kaydedildi.";
            CloseBulkStockModal();
            await RefreshData();
        }
        catch (Exception ex)
        {
            errorMessage = "Kaydetme sırasında hata oluştu: " + ex.Message;
        }
    }

    private void OpenStockMovementModal(RestaurantOrdering.Models.Stock stock)
    {
        selectedStock = stock;
        stockMovement = new RestaurantOrdering.Models.StockMovement
        {
            StockId = stock.Id,
            CreatedAt = DateTime.Now
        };
        showStockMovementModal = true;
        ClearMessages();
    }

    private void CloseStockMovementModal()
    {
        showStockMovementModal = false;
        selectedStock = null;
        stockMovement = new RestaurantOrdering.Models.StockMovement();
    }

    private async Task SaveStockMovement()
    {
        try
        {
            await StockMovementRepository.CreateAsync(stockMovement);
            
            // Update stock quantity
            if (selectedStock != null)
            {
                if (stockMovement.Type == RestaurantOrdering.Models.StockMovementType.StockIn)
                {
                    selectedStock.CurrentQuantity += stockMovement.Quantity;
                }
                else if (stockMovement.Type == RestaurantOrdering.Models.StockMovementType.StockOut)
                {
                    selectedStock.CurrentQuantity -= stockMovement.Quantity;
                    if (selectedStock.CurrentQuantity < 0) selectedStock.CurrentQuantity = 0;
                }
                
                selectedStock.LastUpdated = DateTime.Now;
                await StockRepository.UpdateAsync(selectedStock);
            }

            successMessage = "Stok hareketi başarıyla kaydedildi.";
            CloseStockMovementModal();
            await RefreshData();
        }
        catch (Exception ex)
        {
            errorMessage = "Stok hareketi kaydedilirken hata oluştu: " + ex.Message;
        }
    }

    private void ClearMessages()
    {
        successMessage = "";
        errorMessage = "";
    }

    private string GetCategoryDisplayName(RestaurantOrdering.Models.StockCategory category)
    {
        return category switch
        {
            RestaurantOrdering.Models.StockCategory.Meat => "Et ve Et Ürünleri",
            RestaurantOrdering.Models.StockCategory.Vegetables => "Sebze ve Meyve",
            RestaurantOrdering.Models.StockCategory.Dairy => "Süt Ürünleri",
            RestaurantOrdering.Models.StockCategory.Grains => "Tahıl ve Baklagiller",
            RestaurantOrdering.Models.StockCategory.Spices => "Baharat ve Çeşni",
            RestaurantOrdering.Models.StockCategory.Beverages => "İçecekler",
            RestaurantOrdering.Models.StockCategory.Cleaning => "Temizlik Malzemeleri",
            RestaurantOrdering.Models.StockCategory.Packaging => "Ambalaj Malzemeleri",
            RestaurantOrdering.Models.StockCategory.Other => "Diğer",
            _ => category.ToString()
        };
    }

    private string GetUnitDisplayName(RestaurantOrdering.Models.StockUnit unit)
    {
        return unit switch
        {
            RestaurantOrdering.Models.StockUnit.Kilogram => "Kilogram (kg)",
            RestaurantOrdering.Models.StockUnit.Gram => "Gram (gr)",
            RestaurantOrdering.Models.StockUnit.Piece => "Adet",
            RestaurantOrdering.Models.StockUnit.Liter => "Litre (lt)",
            RestaurantOrdering.Models.StockUnit.Milliliter => "Mililitre (ml)",
            RestaurantOrdering.Models.StockUnit.Bundle => "Demet",
            RestaurantOrdering.Models.StockUnit.Package => "Paket",
            RestaurantOrdering.Models.StockUnit.Box => "Kutu",
            RestaurantOrdering.Models.StockUnit.Bottle => "Şişe",
            RestaurantOrdering.Models.StockUnit.Bag => "Poşet",
            RestaurantOrdering.Models.StockUnit.Can => "Teneke",
            RestaurantOrdering.Models.StockUnit.Sack => "Çuval",
            _ => unit.ToString()
        };
    }

    private string GetUnitStringValue(RestaurantOrdering.Models.StockUnit unit)
    {
        return unit switch
        {
            RestaurantOrdering.Models.StockUnit.Kilogram => "kg",
            RestaurantOrdering.Models.StockUnit.Gram => "gr",
            RestaurantOrdering.Models.StockUnit.Piece => "adet",
            RestaurantOrdering.Models.StockUnit.Liter => "lt",
            RestaurantOrdering.Models.StockUnit.Milliliter => "ml",
            RestaurantOrdering.Models.StockUnit.Bundle => "demet",
            RestaurantOrdering.Models.StockUnit.Package => "paket",
            RestaurantOrdering.Models.StockUnit.Box => "kutu",
            RestaurantOrdering.Models.StockUnit.Bottle => "şişe",
            RestaurantOrdering.Models.StockUnit.Bag => "poşet",
            RestaurantOrdering.Models.StockUnit.Can => "teneke",
            RestaurantOrdering.Models.StockUnit.Sack => "çuval",
            _ => unit.ToString().ToLower()
        };
    }

    private string GetMovementTypeDisplayName(RestaurantOrdering.Models.StockMovementType type)
    {
        return type switch
        {
            RestaurantOrdering.Models.StockMovementType.StockIn => "Stok Girişi",
            RestaurantOrdering.Models.StockMovementType.StockOut => "Stok Çıkışı",
            RestaurantOrdering.Models.StockMovementType.Adjustment => "Stok Düzeltme",
            RestaurantOrdering.Models.StockMovementType.Waste => "Fire/Kayıp",
            _ => type.ToString()
        };
    }
}
