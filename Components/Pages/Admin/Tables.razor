@page "/admin/tables"
@using Microsoft.AspNetCore.Authorization
@using RestaurantOrdering.Models
@using RestaurantOrdering.Repositories
@using RestaurantOrdering.Services
@inject ITableRepository TableRepository
@inject IQrCodeService QrCodeService
@inject IConfiguration Configuration
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Masa YÃ¶netimi - Admin</PageTitle>

<div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-8">
        <div>
            <h1 class="text-3xl font-bold text-gray-800 mb-2">Masa YÃ¶netimi</h1>
            <p class="text-gray-600">MasalarÄ± ve QR kodlarÄ±nÄ± yÃ¶netin</p>
        </div>
        <button @onclick="ShowAddModal" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
            Yeni Masa Ekle
        </button>
    </div>

    @if (tables == null)
    {
        <div class="text-center">
            <div class="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-500 mx-auto"></div>
            <p class="mt-4 text-gray-600">Masalar yÃ¼kleniyor...</p>
        </div>
    }
    else
    {
        <div class="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
            @foreach (var table in tables)
            {
                <div class="bg-white rounded-lg shadow-md p-6">
                    <div class="flex justify-between items-start mb-4">
                        <h3 class="text-xl font-semibold text-gray-800">Masa @table.TableNumber</h3>
                        <span class="@(table.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800") px-2 py-1 text-xs font-medium rounded-full">
                            @(table.IsActive ? "Aktif" : "Pasif")
                        </span>
                    </div>

                    <div class="mb-4">
                        <p class="text-sm text-gray-600 mb-2">QR Kod:</p>
                        @if (!string.IsNullOrEmpty(table.QrCodeUrl))
                        {
                            <img src="data:image/png;base64,@GenerateQrCodeBase64(table.TableNumber)" alt="QR Kod" class="w-20 h-20 mx-auto border">
                        }
                        else
                        {
                            <div class="w-20 h-20 mx-auto bg-gray-200 flex items-center justify-center text-gray-400 text-xs border">
                                QR Yok
                            </div>
                        }
                    </div>

                    <div class="flex space-x-2">
                        <button @onclick="() => EditTable(table)" 
                                class="flex-1 bg-blue-500 hover:bg-blue-600 text-white text-sm font-bold py-2 px-3 rounded">
                            DÃ¼zenle
                        </button>
                        <button @onclick="() => GenerateQrCode(table)" 
                                class="flex-1 bg-green-500 hover:bg-green-600 text-white text-sm font-bold py-2 px-3 rounded">
                            QR Ãœret
                        </button>
                        <button @onclick="() => DownloadQrCode(table)" 
                                class="bg-purple-500 hover:bg-purple-600 text-white text-sm font-bold py-2 px-3 rounded">
                            ðŸ“±
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="fixed bottom-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            @errorMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="fixed bottom-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
            @successMessage
        </div>
    }

    <!-- Add/Edit Modal -->
    @if (showModal)
    {
        <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="mt-3 text-center">
                    <h3 class="text-lg font-medium text-gray-900 mb-4">
                        @(editingTable?.Id == 0 ? "Yeni Masa Ekle" : "Masa DÃ¼zenle")
                    </h3>
                    
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Masa NumarasÄ±</label>
                        <input @bind="editingTable!.TableNumber" 
                               type="number" 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" 
                               placeholder="Masa numarasÄ±">
                    </div>

                    <div class="mb-6">
                        <label class="flex items-center">
                            <input @bind="editingTable!.IsActive" type="checkbox" class="mr-2">
                            <span class="text-sm text-gray-700">Aktif</span>
                        </label>
                    </div>

                    <div class="flex space-x-3">
                        <button @onclick="SaveTable" 
                                class="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">
                            Kaydet
                        </button>
                        <button @onclick="CloseModal" 
                                class="flex-1 bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded">
                            Ä°ptal
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private IEnumerable<Table>? tables;
    private Table? editingTable;
    private bool showModal = false;
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadTables();
    }

    private async Task LoadTables()
    {
        try
        {
            tables = await TableRepository.GetAllAsync();
        }
        catch (Exception ex)
        {
            errorMessage = "Masalar yÃ¼klenirken hata oluÅŸtu.";
            Console.WriteLine($"Error loading tables: {ex.Message}");
        }
    }

    private void ShowAddModal()
    {
        editingTable = new Table { IsActive = true };
        showModal = true;
    }

    private void EditTable(Table table)
    {
        editingTable = new Table
        {
            Id = table.Id,
            TableNumber = table.TableNumber,
            IsActive = table.IsActive,
            QrCodeUrl = table.QrCodeUrl
        };
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        editingTable = null;
        errorMessage = null;
    }

    private async Task SaveTable()
    {
        if (editingTable == null) return;

        try
        {
            if (editingTable.TableNumber <= 0)
            {
                errorMessage = "Masa numarasÄ± 0'dan bÃ¼yÃ¼k olmalÄ±dÄ±r.";
                return;
            }

            if (editingTable.Id == 0)
            {
                await TableRepository.CreateAsync(editingTable);
                successMessage = "Masa baÅŸarÄ±yla eklendi.";
            }
            else
            {
                await TableRepository.UpdateAsync(editingTable);
                successMessage = "Masa baÅŸarÄ±yla gÃ¼ncellendi.";
            }

            await LoadTables();
            CloseModal();

            // Auto-hide success message
            _ = Task.Delay(3000).ContinueWith(_ =>
            {
                successMessage = null;
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            errorMessage = "Masa kaydedilirken hata oluÅŸtu.";
            Console.WriteLine($"Error saving table: {ex.Message}");
        }
    }

    private async Task GenerateQrCode(Table table)
    {
        try
        {
            var baseUrl = Configuration["BaseUrl"] ?? "https://localhost:7000";
            table.QrCodeUrl = QrCodeService.GenerateTableQrCodeAsBase64(table.TableNumber, baseUrl);
            
            await TableRepository.UpdateAsync(table);
            await LoadTables();
            
            successMessage = $"Masa {table.TableNumber} iÃ§in QR kod oluÅŸturuldu.";
            
            // Auto-hide success message
            _ = Task.Delay(3000).ContinueWith(_ =>
            {
                successMessage = null;
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            errorMessage = "QR kod oluÅŸturulurken hata oluÅŸtu.";
            Console.WriteLine($"Error generating QR code: {ex.Message}");
        }
    }

    private string GenerateQrCodeBase64(int tableNumber)
    {
        try
        {
            var baseUrl = Configuration["BaseUrl"] ?? "https://localhost:7000";
            return QrCodeService.GenerateTableQrCodeAsBase64(tableNumber, baseUrl);
        }
        catch
        {
            return "";
        }
    }

    private async Task DownloadQrCode(Table table)
    {
        try
        {
            var baseUrl = Configuration["BaseUrl"] ?? "https://localhost:7000";
            var qrCodeBase64 = QrCodeService.GenerateTableQrCodeAsBase64(table.TableNumber, baseUrl);
            
            var fileName = $"masa-{table.TableNumber}-qr.png";
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, qrCodeBase64);
            
            successMessage = $"Masa {table.TableNumber} QR kodu indirildi.";
            
            // Auto-hide success message
            _ = Task.Delay(3000).ContinueWith(_ =>
            {
                successMessage = null;
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            errorMessage = "QR kod indirilemedi.";
            Console.WriteLine($"Error downloading QR code: {ex.Message}");
        }
    }
}
