@page "/admin/table-orders/{tableId:int}"
@using Microsoft.AspNetCore.Authorization
@using RestaurantOrdering.Models
@using RestaurantOrdering.Repositories
@inject IOrderRepository OrderRepository
@inject ITableRepository TableRepository
@inject NavigationManager Navigation
@attribute [Authorize]
@rendermode InteractiveServer

<PageTitle>Masa @TableNumber Siparişleri - Admin</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-natural-light to-cream-50">
    <!-- Header Section -->
    <div class="bg-white border-b border-natural-muted shadow-sm">
        <div class="natural-container py-6">
            <div class="flex flex-col md:flex-row md:justify-between md:items-center space-y-4 md:space-y-0">
                <div class="flex items-center space-x-4">
                    <button @onclick="GoBack" 
                            class="inline-flex items-center px-3 py-2 border border-gray-300 rounded-lg text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-natural-accent focus:ring-offset-2 transition-colors duration-200">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                        </svg>
                        Geri Dön
                    </button>
                    
                    <div class="flex items-center space-x-3">
                        <div class="w-12 h-12 bg-gradient-to-br from-natural-accent to-natural-dark rounded-xl flex items-center justify-center">
                            <svg class="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M21 2H3a1 1 0 00-1 1v18a1 1 0 001 1h18a1 1 0 001-1V3a1 1 0 00-1-1zM11 19H4v-6h7v6zm0-8H4V5h7v6zm9 8h-7v-6h7v6zm0-8h-7V5h7v6z"/>
                            </svg>
                        </div>
                        <div>
                            <h1 class="text-3xl font-bold text-gray-900">Masa @TableNumber</h1>
                            <p class="text-gray-600 mt-1">Sipariş detayları ve durum yönetimi</p>
                        </div>
                    </div>
                </div>
                
                @if (orders?.Any() == true)
                {
                    <div class="flex items-center space-x-3">
                        @if (orders.Any(o => o.Status == OrderStatus.Pending))
                        {
                            <button @onclick="ConfirmAllPendingOrders" 
                                    class="inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200 font-medium">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                </svg>
                                Hepsini Onayla
                            </button>
                        }
                        
                        <div class="inline-flex items-center px-3 py-2 rounded-lg bg-blue-50 text-blue-700 text-sm font-medium">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                            </svg>
                            @orders.Sum(o => o.TotalPrice).ToString("C", new System.Globalization.CultureInfo("tr-TR"))
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="natural-container py-8">
        @if (orders == null)
        {
            <div class="flex flex-col items-center justify-center py-20">
                <div class="animate-spin rounded-full h-16 w-16 border-b-2 border-natural-accent"></div>
                <p class="mt-4 text-lg text-gray-600">Siparişler yükleniyor...</p>
                <p class="text-sm text-gray-500 mt-1">Lütfen bekleyiniz</p>
            </div>
        }
        else if (!orders.Any())
        {
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-12 text-center">
                <div class="w-20 h-20 bg-green-50 rounded-full flex items-center justify-center mx-auto mb-6">
                    <svg class="w-10 h-10 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                </div>
                <h3 class="text-xl font-semibold text-gray-800 mb-2">Tüm siparişler tamamlandı!</h3>
                <p class="text-gray-600 mb-6">Bu masada bekleyen sipariş bulunmamaktadır.</p>
                <button @onclick="GoBack" 
                        class="inline-flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200 font-medium">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                    </svg>
                    Masa Görünümüne Dön
                </button>
            </div>
        }
        else
        {
            <!-- Order Summary Card -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-8">
                <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center space-y-4 sm:space-y-0">
                    <div class="flex items-center space-x-4">
                        <div class="w-12 h-12 bg-blue-50 rounded-lg flex items-center justify-center">
                            <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
                            </svg>
                        </div>
                        <div>
                            <h3 class="text-lg font-semibold text-gray-800">Sipariş Özeti</h3>
                            <p class="text-gray-600">@orders.Count() adet sipariş • @DateTime.Now.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("tr-TR"))</p>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div class="text-center">
                            <p class="text-sm text-gray-600">Bekleyen</p>
                            <p class="text-xl font-bold text-orange-600">@orders.Count(o => o.Status == OrderStatus.Pending)</p>
                        </div>
                        <div class="text-center">
                            <p class="text-sm text-gray-600">Toplam Tutar</p>
                            <p class="text-xl font-bold text-natural-accent">@orders.Sum(o => o.TotalPrice).ToString("C", new System.Globalization.CultureInfo("tr-TR"))</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Orders List -->
            <div class="space-y-4">
                @foreach (var order in orders.OrderBy(o => o.OrderDate))
                {
                    <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 hover:shadow-md transition-shadow duration-200">
                        <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
                            <!-- Order Info -->
                            <div class="flex-1">
                                <div class="flex items-start space-x-4">
                                    <!-- Food Image Placeholder -->
                                    <div class="w-16 h-16 bg-gray-100 rounded-lg flex items-center justify-center flex-shrink-0">
                                        <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-1.5 9H19M7 13v6a2 2 0 002 2h4.5M12 7v6m0 0l-3-3m3 3l3-3"></path>
                                        </svg>
                                    </div>
                                    
                                    <div class="flex-1 min-w-0">
                                        <div class="flex items-center space-x-3 mb-2">
                                            <h4 class="text-lg font-semibold text-gray-900 truncate">@order.MenuItem.Name</h4>
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                                ×@order.Quantity
                                            </span>
                                        </div>
                                        
                                        <p class="text-sm text-gray-600 mb-1">@order.MenuItem.Menu.Name</p>
                                        <p class="text-sm text-gray-500">@order.OrderDate.ToString("dd.MM.yyyy HH:mm")</p>
                                        
                                        @if (!string.IsNullOrEmpty(order.Notes))
                                        {
                                            <div class="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                                                <div class="flex items-start space-x-2">
                                                    <svg class="w-4 h-4 text-yellow-600 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                                    </svg>
                                                    <div>
                                                        <p class="text-sm font-medium text-yellow-800">Özel Not</p>
                                                        <p class="text-sm text-yellow-700">@order.Notes</p>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                    
                                    <div class="text-right">
                                        <p class="text-xl font-bold text-gray-900">@order.TotalPrice.ToString("C", new System.Globalization.CultureInfo("tr-TR"))</p>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Status and Actions -->
                            <div class="flex flex-col sm:flex-row sm:items-center space-y-3 sm:space-y-0 sm:space-x-4">
                                <!-- Status Badge -->
                                <span class="@GetStatusClass(order.Status) px-3 py-2 rounded-full text-sm font-medium text-center min-w-[120px]">
                                    @GetStatusText(order.Status)
                                </span>
                                
                                <!-- Action Buttons -->
                                @if (order.Status != OrderStatus.Cancelled && order.Status != OrderStatus.Served)
                                {
                                    <div class="flex flex-wrap gap-2">
                                        @if (order.Status == OrderStatus.Pending)
                                        {
                                            <button @onclick="() => UpdateOrderStatus(order.Id, OrderStatus.Confirmed)" 
                                                    class="inline-flex items-center px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200 text-sm font-medium">
                                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                                </svg>
                                                Onayla
                                            </button>
                                            <button @onclick="() => UpdateOrderStatus(order.Id, OrderStatus.Cancelled)" 
                                                    class="inline-flex items-center px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors duration-200 text-sm font-medium">
                                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                                </svg>
                                                İptal
                                            </button>
                                        }
                                        @if (order.Status == OrderStatus.Confirmed)
                                        {
                                            <button @onclick="() => UpdateOrderStatus(order.Id, OrderStatus.Preparing)" 
                                                    class="inline-flex items-center px-3 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-offset-2 transition-colors duration-200 text-sm font-medium">
                                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                </svg>
                                                Hazırlanıyor
                                            </button>
                                            <button @onclick="() => UpdateOrderStatus(order.Id, OrderStatus.Cancelled)" 
                                                    class="inline-flex items-center px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors duration-200 text-sm font-medium">
                                                İptal
                                            </button>
                                        }
                                        @if (order.Status == OrderStatus.Preparing)
                                        {
                                            <button @onclick="() => UpdateOrderStatus(order.Id, OrderStatus.Ready)" 
                                                    class="inline-flex items-center px-3 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition-colors duration-200 text-sm font-medium">
                                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                </svg>
                                                Hazır
                                            </button>
                                        }
                                        @if (order.Status == OrderStatus.Ready)
                                        {
                                            <button @onclick="() => UpdateOrderStatus(order.Id, OrderStatus.Served)" 
                                                    class="inline-flex items-center px-3 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors duration-200 text-sm font-medium">
                                                <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                                </svg>
                                                Servis Edildi
                                            </button>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="fixed bottom-4 right-4 bg-red-50 border-l-4 border-red-400 text-red-700 px-6 py-4 rounded-lg shadow-lg max-w-md">
            <div class="flex items-center">
                <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <div>
                    <p class="font-medium">Hata!</p>
                    <p class="text-sm">@errorMessage</p>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="fixed bottom-4 right-4 bg-green-50 border-l-4 border-green-400 text-green-700 px-6 py-4 rounded-lg shadow-lg max-w-md">
            <div class="flex items-center">
                <svg class="w-5 h-5 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <div>
                    <p class="font-medium">Başarılı!</p>
                    <p class="text-sm">@successMessage</p>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int TableId { get; set; }
    
    private IEnumerable<Order>? orders;
    private int TableNumber;
    private string? errorMessage;
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadTableInfo();
        await LoadOrders();
    }

    private async Task LoadTableInfo()
    {
        try
        {
            var table = await TableRepository.GetByIdAsync(TableId);
            TableNumber = table?.TableNumber ?? 0;
        }
        catch (Exception ex)
        {
            errorMessage = "Masa bilgileri yüklenirken hata oluştu.";
            Console.WriteLine($"Error loading table info: {ex.Message}");
        }
    }

    private async Task LoadOrders()
    {
        try
        {
            orders = await OrderRepository.GetPendingOrdersByTableIdAsync(TableId);
        }
        catch (Exception ex)
        {
            errorMessage = "Siparişler yüklenirken hata oluştu.";
            Console.WriteLine($"Error loading orders: {ex.Message}");
        }
    }

    private async Task UpdateOrderStatus(int orderId, OrderStatus status)
    {
        try
        {
            await OrderRepository.UpdateStatusAsync(orderId, status);
            successMessage = $"Sipariş durumu '{GetStatusText(status)}' olarak güncellendi.";
            
            await LoadOrders();
            
            // Auto-hide success message
            _ = Task.Delay(3000).ContinueWith(_ =>
            {
                successMessage = null;
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            errorMessage = "Sipariş durumu güncellenirken hata oluştu.";
            Console.WriteLine($"Error updating order status: {ex.Message}");
        }
    }

    private async Task ConfirmAllPendingOrders()
    {
        try
        {
            var pendingOrders = orders?.Where(o => o.Status == OrderStatus.Pending);
            if (pendingOrders?.Any() == true)
            {
                foreach (var order in pendingOrders)
                {
                    await OrderRepository.UpdateStatusAsync(order.Id, OrderStatus.Confirmed);
                }
                
                successMessage = $"{pendingOrders.Count()} sipariş onaylandı.";
                await LoadOrders();
                
                // Auto-hide success message
                _ = Task.Delay(3000).ContinueWith(_ =>
                {
                    successMessage = null;
                    InvokeAsync(StateHasChanged);
                });
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Siparişler onaylanırken hata oluştu.";
            Console.WriteLine($"Error confirming orders: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/admin/orders");
    }

    private string GetStatusClass(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "bg-yellow-100 text-yellow-800",
            OrderStatus.Confirmed => "bg-blue-100 text-blue-800",
            OrderStatus.Preparing => "bg-orange-100 text-orange-800",
            OrderStatus.Ready => "bg-green-100 text-green-800",
            OrderStatus.Served => "bg-gray-100 text-gray-800",
            OrderStatus.Cancelled => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetStatusText(OrderStatus status)
    {
        return status switch
        {
            OrderStatus.Pending => "Bekliyor",
            OrderStatus.Confirmed => "Onaylandı",
            OrderStatus.Preparing => "Hazırlanıyor",
            OrderStatus.Ready => "Hazır",
            OrderStatus.Served => "Servis Edildi",
            OrderStatus.Cancelled => "İptal Edildi",
            _ => "Bilinmiyor"
        };
    }
}
